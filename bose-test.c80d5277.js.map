{"mappings":"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","sources":["<anon>","src/index.js","src/js/modal.js","src/js/burger-menu.js","src/js/keyboard.js","src/js/like-toggle.js","src/js/cart.js","src/js/database.js","src/js/admin.js"],"sourcesContent":["const $8a7e756c566dd1ea$var$modal = document.getElementById('modal');\nconst $8a7e756c566dd1ea$var$openButtons = document.querySelectorAll('[data-open-modal]');\nconst $8a7e756c566dd1ea$var$closeButtons = document.querySelectorAll('[data-close-modal], .modal-backdrop, .modal-close');\nfunction $8a7e756c566dd1ea$export$a7f6cffb6b8ba11c() {\n    if (!$8a7e756c566dd1ea$var$modal) return;\n    $8a7e756c566dd1ea$var$modal.setAttribute('aria-hidden', 'false');\n    document.body.style.overflow = 'hidden';\n    const firstInput = $8a7e756c566dd1ea$var$modal.querySelector('input');\n    if (firstInput) setTimeout(()=>firstInput.focus(), 50);\n}\nfunction $8a7e756c566dd1ea$export$3f6fecd573f3fa48() {\n    if (!$8a7e756c566dd1ea$var$modal) return;\n    $8a7e756c566dd1ea$var$modal.setAttribute('aria-hidden', 'true');\n    document.body.style.overflow = '';\n}\nfunction $8a7e756c566dd1ea$export$60523367a7e10402() {\n    $8a7e756c566dd1ea$var$openButtons.forEach((btn)=>btn.addEventListener('click', $8a7e756c566dd1ea$export$a7f6cffb6b8ba11c));\n    $8a7e756c566dd1ea$var$closeButtons.forEach((btn)=>btn.addEventListener('click', $8a7e756c566dd1ea$export$3f6fecd573f3fa48));\n    // Form handling\n    const form = document.querySelector('.modal-form');\n    if (form) form.addEventListener('submit', (e)=>{\n        e.preventDefault();\n        $8a7e756c566dd1ea$export$3f6fecd573f3fa48();\n        alert(\"\\u0421\\u043F\\u0430\\u0441\\u0438\\u0431\\u043E! \\u041C\\u044B \\u0441\\u0432\\u044F\\u0436\\u0435\\u043C\\u0441\\u044F \\u0441 \\u0432\\u0430\\u043C\\u0438.\");\n        form.reset();\n    });\n}\n\n\nconst $6442e51d8b52aaf7$var$burgerMenu = document.getElementById('burger-menu');\nconst $6442e51d8b52aaf7$var$openBurgerButtons = document.querySelectorAll('[data-open-burger]');\nconst $6442e51d8b52aaf7$var$closeBurgerButtons = document.querySelectorAll('[data-close-burger]');\nfunction $6442e51d8b52aaf7$export$71f4ca44c756a50e() {\n    if (!$6442e51d8b52aaf7$var$burgerMenu) return;\n    $6442e51d8b52aaf7$var$burgerMenu.setAttribute('aria-hidden', 'false');\n// document.body.style.overflow = 'hidden';\n}\nfunction $6442e51d8b52aaf7$export$53986d5aeb390955() {\n    if (!$6442e51d8b52aaf7$var$burgerMenu) return;\n    $6442e51d8b52aaf7$var$burgerMenu.setAttribute('aria-hidden', 'true');\n// document.body.style.overflow = '';\n}\nfunction $6442e51d8b52aaf7$export$6346f9d5a99783bd() {\n    $6442e51d8b52aaf7$var$openBurgerButtons.forEach((btn)=>btn.addEventListener('click', $6442e51d8b52aaf7$export$71f4ca44c756a50e));\n    $6442e51d8b52aaf7$var$closeBurgerButtons.forEach((btn)=>btn.addEventListener('click', $6442e51d8b52aaf7$export$53986d5aeb390955));\n}\n\n\n\n\nfunction $515766f963839bcb$export$dd52d3a8aed5a5e8() {\n    document.addEventListener('keydown', (e)=>{\n        if (e.key === 'Escape') {\n            (0, $8a7e756c566dd1ea$export$3f6fecd573f3fa48)();\n            (0, $6442e51d8b52aaf7$export$53986d5aeb390955)();\n        }\n    });\n}\n\n\n// document.querySelectorAll('.icon-like').forEach(icon => {\n//   icon.addEventListener('click', () => {\n//     icon.classList.toggle('active');\n//   });\n// });\n// цей варіант подобається\ndocument.querySelectorAll('.icon-like').forEach((like, index)=>{\n    const key = `product-${index}-liked`;\n    if (localStorage.getItem(key) === '1') like.classList.add('active');\n    like.addEventListener('click', ()=>{\n        like.classList.toggle('active');\n        if (like.classList.contains('active')) localStorage.setItem(key, '1');\n        else localStorage.removeItem(key);\n    });\n});\n\n\n// Имитация базы данных для товаров и заказов\nclass $d5682f4c840b9378$export$6feb5ea51a7b0b47 {\n    constructor(){\n        this.products = [\n            {\n                id: 1,\n                name: \"Bose portable Smart speaker\",\n                category: \"Smart home\",\n                price: 399.00,\n                image: \"img/products/Bose_portable_Smart_speaker_desk.png\",\n                description: \"\\u041F\\u043E\\u0440\\u0442\\u0430\\u0442\\u0438\\u0432\\u043D\\u0430\\u044F \\u0443\\u043C\\u043D\\u0430\\u044F \\u043A\\u043E\\u043B\\u043E\\u043D\\u043A\\u0430 \\u0441 \\u0433\\u043E\\u043B\\u043E\\u0441\\u043E\\u0432\\u044B\\u043C \\u0443\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435\\u043C\"\n            },\n            {\n                id: 2,\n                name: \"SoundLink Flex Bluetooth speaker\",\n                category: \"Portable bluetooth\",\n                price: 149.00,\n                image: \"img/products/Portable_bluetooth_desk.png\",\n                description: \"\\u041F\\u043E\\u0440\\u0442\\u0430\\u0442\\u0438\\u0432\\u043D\\u0430\\u044F Bluetooth \\u043A\\u043E\\u043B\\u043E\\u043D\\u043A\\u0430 \\u0441 \\u0432\\u043E\\u0434\\u043E\\u043D\\u0435\\u043F\\u0440\\u043E\\u043D\\u0438\\u0446\\u0430\\u0435\\u043C\\u043E\\u0441\\u0442\\u044C\\u044E\"\n            },\n            {\n                id: 3,\n                name: \"SoundLink Color Bluetooth speaker II\",\n                category: \"Portable bluetooth\",\n                price: 129.00,\n                image: \"img/products/Portable_bluetooth_II_desk.png\",\n                description: \"\\u0426\\u0432\\u0435\\u0442\\u043D\\u0430\\u044F \\u043F\\u043E\\u0440\\u0442\\u0430\\u0442\\u0438\\u0432\\u043D\\u0430\\u044F Bluetooth \\u043A\\u043E\\u043B\\u043E\\u043D\\u043A\\u0430\"\n            }\n        ];\n        this.cart = [];\n        this.orders = [];\n        this.paymentMethods = [\n            {\n                id: 'card',\n                name: \"\\u0411\\u0430\\u043D\\u043A\\u043E\\u0432\\u0441\\u043A\\u0430\\u044F \\u043A\\u0430\\u0440\\u0442\\u0430\",\n                icon: \"\\uD83D\\uDCB3\"\n            },\n            {\n                id: 'cash',\n                name: \"\\u041D\\u0430\\u043B\\u0438\\u0447\\u043D\\u044B\\u0435 \\u043F\\u0440\\u0438 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0438\\u0438\",\n                icon: \"\\uD83D\\uDCB5\"\n            },\n            {\n                id: 'online',\n                name: \"\\u041E\\u043D\\u043B\\u0430\\u0439\\u043D \\u043E\\u043F\\u043B\\u0430\\u0442\\u0430\",\n                icon: \"\\uD83C\\uDF10\"\n            }\n        ];\n        this.deliveryMethods = [\n            {\n                id: 'ukrpost',\n                name: \"\\u0423\\u043A\\u0440\\u043F\\u043E\\u0448\\u0442\\u0430\",\n                price: 50,\n                icon: \"\\uD83D\\uDCEE\"\n            },\n            {\n                id: 'novapost',\n                name: \"\\u041D\\u043E\\u0432\\u0430 \\u043F\\u043E\\u0448\\u0442\\u0430\",\n                price: 80,\n                icon: \"\\uD83D\\uDE9A\"\n            }\n        ];\n    }\n    // Получить все товары\n    getProducts() {\n        return this.products;\n    }\n    // Получить товар по ID\n    getProductById(id) {\n        return this.products.find((product)=>product.id === id);\n    }\n    // Добавить товар в корзину\n    addToCart(productId, quantity = 1) {\n        const product = this.getProductById(productId);\n        if (!product) return false;\n        const existingItem = this.cart.find((item)=>item.productId === productId);\n        if (existingItem) existingItem.quantity += quantity;\n        else this.cart.push({\n            productId: productId,\n            quantity: quantity,\n            addedAt: new Date()\n        });\n        return true;\n    }\n    // Удалить товар из корзины\n    removeFromCart(productId) {\n        this.cart = this.cart.filter((item)=>item.productId !== productId);\n    }\n    // Обновить количество товара в корзине\n    updateCartItemQuantity(productId, quantity) {\n        const item = this.cart.find((item)=>item.productId === productId);\n        if (item) {\n            if (quantity <= 0) this.removeFromCart(productId);\n            else item.quantity = quantity;\n        }\n    }\n    // Получить корзину\n    getCart() {\n        return this.cart.map((cartItem)=>{\n            const product = this.getProductById(cartItem.productId);\n            return {\n                ...cartItem,\n                product: product,\n                totalPrice: product.price * cartItem.quantity\n            };\n        });\n    }\n    // Получить общую стоимость корзины\n    getCartTotal() {\n        return this.cart.reduce((total, item)=>{\n            const product = this.getProductById(item.productId);\n            return total + product.price * item.quantity;\n        }, 0);\n    }\n    // Очистить корзину\n    clearCart() {\n        this.cart = [];\n    }\n    // Создать заказ\n    createOrder(orderData) {\n        const order = {\n            id: Date.now(),\n            items: [\n                ...this.cart\n            ],\n            total: this.getCartTotal(),\n            delivery: orderData.delivery,\n            payment: orderData.payment,\n            customerInfo: orderData.customerInfo,\n            status: 'pending',\n            createdAt: new Date()\n        };\n        this.orders.push(order);\n        this.clearCart();\n        return order;\n    }\n    // Получить все заказы\n    getOrders() {\n        return this.orders;\n    }\n    // Получить способы оплаты\n    getPaymentMethods() {\n        return this.paymentMethods;\n    }\n    // Получить способы доставки\n    getDeliveryMethods() {\n        return this.deliveryMethods;\n    }\n}\nconst $d5682f4c840b9378$export$f932f06c7eb6abeb = new $d5682f4c840b9378$export$6feb5ea51a7b0b47();\n\n\nclass $915de8ffc4dd3149$export$7c8e4c531e203ab0 {\n    constructor(){\n        this.cart = [];\n        this.init();\n    }\n    init() {\n        this.bindEvents();\n        this.updateCartDisplay();\n    }\n    bindEvents() {\n        // Обработчики для кнопок \"В корзину\"\n        document.addEventListener('click', (e)=>{\n            if (e.target.textContent === \"\\u0412 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0443\" || e.target.textContent.trim() === \"\\u0412 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0443\") {\n                e.preventDefault();\n                const card = e.target.closest('.card');\n                if (card) this.addToCartFromCard(card);\n            }\n        });\n        // Обработчики для кнопок \"Купить\" (добавляем в корзину и открываем корзину)\n        document.addEventListener('click', (e)=>{\n            if (e.target.textContent === \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\" || e.target.textContent.trim() === \"\\u041A\\u0443\\u043F\\u0438\\u0442\\u044C\") {\n                e.preventDefault();\n                const card = e.target.closest('.card');\n                if (card) {\n                    this.addToCartFromCard(card);\n                    this.openCart();\n                }\n            }\n        });\n        // Обработчик для кнопки корзины в header\n        document.addEventListener('click', (e)=>{\n            if (e.target.closest('[data-open-cart]')) {\n                e.preventDefault();\n                this.openCart();\n            }\n        });\n    }\n    addToCartFromCard(card) {\n        const title = card.querySelector('.card-title');\n        const price = card.querySelector('.card-price');\n        if (title && price) {\n            const productName = title.textContent.trim();\n            const productPrice = parseFloat(price.textContent.replace(/[^0-9.]/g, ''));\n            // Находим товар в базе данных по названию\n            const product = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getProducts().find((p)=>p.name === productName);\n            if (product) {\n                const success = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).addToCart(product.id, 1);\n                if (success) {\n                    this.showNotification(\"\\u0422\\u043E\\u0432\\u0430\\u0440 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0443!\");\n                    this.updateCartDisplay();\n                }\n            }\n        }\n    }\n    addToCart(productId, quantity = 1) {\n        const success = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).addToCart(productId, quantity);\n        if (success) {\n            this.updateCartDisplay();\n            return true;\n        }\n        return false;\n    }\n    removeFromCart(productId) {\n        (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).removeFromCart(productId);\n        this.updateCartDisplay();\n    }\n    updateCartItemQuantity(productId, quantity) {\n        (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).updateCartItemQuantity(productId, quantity);\n        this.updateCartDisplay();\n    }\n    getCart() {\n        return (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getCart();\n    }\n    getCartTotal() {\n        return (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getCartTotal();\n    }\n    clearCart() {\n        (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).clearCart();\n        this.updateCartDisplay();\n    }\n    updateCartDisplay() {\n        const cart = this.getCart();\n        const total = this.getCartTotal();\n        // Обновляем счетчик товаров в корзине (если есть)\n        const cartCounter = document.querySelector('.cart-counter');\n        if (cartCounter) {\n            const totalItems = cart.reduce((sum, item)=>sum + item.quantity, 0);\n            cartCounter.textContent = totalItems;\n            cartCounter.style.display = totalItems > 0 ? 'block' : 'none';\n        }\n        // Обновляем содержимое корзины если она открыта\n        const cartModal = document.querySelector('.cart-modal');\n        if (cartModal && cartModal.style.display !== 'none') this.renderCartItems();\n    }\n    renderCartItems() {\n        const cartItemsContainer = document.querySelector('.cart-items');\n        if (!cartItemsContainer) return;\n        const cart = this.getCart();\n        if (cart.length === 0) {\n            cartItemsContainer.innerHTML = '<p class=\"empty-cart\">\\u041A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0430 \\u043F\\u0443\\u0441\\u0442\\u0430</p>';\n            return;\n        }\n        cartItemsContainer.innerHTML = cart.map((item)=>`\n      <div class=\"cart-item\" data-product-id=\"${item.productId}\">\n        <div class=\"cart-item-image\">\n          <img src=\"${item.product.image}\" alt=\"${item.product.name}\" />\n        </div>\n        <div class=\"cart-item-details\">\n          <h4 class=\"cart-item-title\">${item.product.name}</h4>\n          <p class=\"cart-item-category\">${item.product.category}</p>\n          <div class=\"cart-item-controls\">\n            <button class=\"quantity-btn minus\" data-product-id=\"${item.productId}\">-</button>\n            <span class=\"quantity\">${item.quantity}</span>\n            <button class=\"quantity-btn plus\" data-product-id=\"${item.productId}\">+</button>\n            <button class=\"remove-btn\" data-product-id=\"${item.productId}\">\\xd7</button>\n          </div>\n        </div>\n        <div class=\"cart-item-price\">\n          <span class=\"price\">$${item.totalPrice.toFixed(2)}</span>\n        </div>\n      </div>\n    `).join('');\n        // Добавляем обработчики для кнопок управления количеством\n        cartItemsContainer.addEventListener('click', (e)=>{\n            const productId = parseInt(e.target.dataset.productId);\n            if (e.target.classList.contains('minus')) {\n                const item = cart.find((item)=>item.productId === productId);\n                if (item && item.quantity > 1) this.updateCartItemQuantity(productId, item.quantity - 1);\n                else this.removeFromCart(productId);\n            } else if (e.target.classList.contains('plus')) {\n                const item = cart.find((item)=>item.productId === productId);\n                if (item) this.updateCartItemQuantity(productId, item.quantity + 1);\n            } else if (e.target.classList.contains('remove-btn')) this.removeFromCart(productId);\n        });\n        // Обновляем общую сумму\n        const totalElement = document.querySelector('.cart-total');\n        if (totalElement) totalElement.textContent = `$${this.getCartTotal().toFixed(2)}`;\n    }\n    openCart() {\n        // Создаем модальное окно корзины если его нет\n        let cartModal = document.querySelector('.cart-modal');\n        if (!cartModal) {\n            cartModal = this.createCartModal();\n            document.body.appendChild(cartModal);\n        }\n        this.renderCartItems();\n        cartModal.style.display = 'flex';\n        document.body.style.overflow = 'hidden';\n    }\n    closeCart() {\n        const cartModal = document.querySelector('.cart-modal');\n        if (cartModal) {\n            cartModal.style.display = 'none';\n            document.body.style.overflow = 'auto';\n        }\n    }\n    createCartModal() {\n        const modal = document.createElement('div');\n        modal.className = 'cart-modal';\n        modal.innerHTML = `\n      <div class=\"cart-modal-content\">\n        <div class=\"cart-header\">\n          <h2>\\u{41A}\\u{43E}\\u{440}\\u{437}\\u{438}\\u{43D}\\u{430}</h2>\n          <button class=\"close-cart\">&times;</button>\n        </div>\n        <div class=\"cart-items\"></div>\n        <div class=\"cart-footer\">\n          <div class=\"cart-total-section\">\n            <span class=\"total-label\">\\u{418}\\u{442}\\u{43E}\\u{433}\\u{43E}:</span>\n            <span class=\"cart-total\">$0.00</span>\n          </div>\n          <button class=\"btn checkout-btn\">\\u{41E}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{438}\\u{442}\\u{44C} \\u{437}\\u{430}\\u{43A}\\u{430}\\u{437}</button>\n        </div>\n      </div>\n    `;\n        // Добавляем обработчики событий\n        modal.querySelector('.close-cart').addEventListener('click', ()=>this.closeCart());\n        modal.querySelector('.checkout-btn').addEventListener('click', ()=>this.openCheckout());\n        // Закрытие по клику вне модального окна\n        modal.addEventListener('click', (e)=>{\n            if (e.target === modal) this.closeCart();\n        });\n        return modal;\n    }\n    openCheckout() {\n        const cart = this.getCart();\n        if (cart.length === 0) {\n            this.showNotification(\"\\u041A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0430 \\u043F\\u0443\\u0441\\u0442\\u0430!\");\n            return;\n        }\n        // Создаем модальное окно оформления заказа\n        let checkoutModal = document.querySelector('.checkout-modal');\n        if (!checkoutModal) {\n            checkoutModal = this.createCheckoutModal();\n            document.body.appendChild(checkoutModal);\n        }\n        this.renderCheckoutForm();\n        checkoutModal.style.display = 'flex';\n        this.closeCart();\n    }\n    createCheckoutModal() {\n        const modal = document.createElement('div');\n        modal.className = 'checkout-modal';\n        modal.innerHTML = `\n      <div class=\"checkout-modal-content\">\n        <div class=\"checkout-header\">\n          <h2>\\u{41E}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{43B}\\u{435}\\u{43D}\\u{438}\\u{435} \\u{437}\\u{430}\\u{43A}\\u{430}\\u{437}\\u{430}</h2>\n          <button class=\"close-checkout\">&times;</button>\n        </div>\n        <form class=\"checkout-form\">\n          <div class=\"checkout-items\"></div>\n          \n          <div class=\"form-section\">\n            <h3>\\u{41A}\\u{43E}\\u{43D}\\u{442}\\u{430}\\u{43A}\\u{442}\\u{43D}\\u{430}\\u{44F} \\u{438}\\u{43D}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{430}\\u{446}\\u{438}\\u{44F}</h3>\n            <div class=\"form-group\">\n              <label for=\"customer-name\">\\u{418}\\u{43C}\\u{44F} *</label>\n              <input type=\"text\" id=\"customer-name\" name=\"name\" required>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"customer-phone\">\\u{422}\\u{435}\\u{43B}\\u{435}\\u{444}\\u{43E}\\u{43D} *</label>\n              <input type=\"tel\" id=\"customer-phone\" name=\"phone\" required>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"customer-email\">Email</label>\n              <input type=\"email\" id=\"customer-email\" name=\"email\">\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h3>\\u{421}\\u{43F}\\u{43E}\\u{441}\\u{43E}\\u{431} \\u{434}\\u{43E}\\u{441}\\u{442}\\u{430}\\u{432}\\u{43A}\\u{438}</h3>\n            <div class=\"delivery-methods\"></div>\n          </div>\n\n          <div class=\"form-section\">\n            <h3>\\u{421}\\u{43F}\\u{43E}\\u{441}\\u{43E}\\u{431} \\u{43E}\\u{43F}\\u{43B}\\u{430}\\u{442}\\u{44B}</h3>\n            <div class=\"payment-methods\"></div>\n          </div>\n\n          <div class=\"checkout-total\">\n            <div class=\"total-line\">\n              <span>\\u{422}\\u{43E}\\u{432}\\u{430}\\u{440}\\u{44B}:</span>\n              <span class=\"items-total\">$0.00</span>\n            </div>\n            <div class=\"total-line\">\n              <span>\\u{414}\\u{43E}\\u{441}\\u{442}\\u{430}\\u{432}\\u{43A}\\u{430}:</span>\n              <span class=\"delivery-total\">$0.00</span>\n            </div>\n            <div class=\"total-line total-final\">\n              <span>\\u{418}\\u{442}\\u{43E}\\u{433}\\u{43E}:</span>\n              <span class=\"final-total\">$0.00</span>\n            </div>\n          </div>\n\n          <button type=\"submit\" class=\"btn submit-order\">\\u{41F}\\u{43E}\\u{434}\\u{442}\\u{432}\\u{435}\\u{440}\\u{434}\\u{438}\\u{442}\\u{44C} \\u{437}\\u{430}\\u{43A}\\u{430}\\u{437}</button>\n        </form>\n      </div>\n    `;\n        // Добавляем обработчики событий\n        modal.querySelector('.close-checkout').addEventListener('click', ()=>this.closeCheckout());\n        modal.addEventListener('click', (e)=>{\n            if (e.target === modal) this.closeCheckout();\n        });\n        // Обработчик формы заказа\n        const form = modal.querySelector('.checkout-form');\n        form.addEventListener('submit', (e)=>this.handleOrderSubmit(e));\n        return modal;\n    }\n    renderCheckoutForm() {\n        const cart = this.getCart();\n        const total = this.getCartTotal();\n        // Рендерим товары в заказе\n        const checkoutItems = document.querySelector('.checkout-items');\n        checkoutItems.innerHTML = cart.map((item)=>`\n      <div class=\"checkout-item\">\n        <img src=\"${item.product.image}\" alt=\"${item.product.name}\" />\n        <div class=\"checkout-item-info\">\n          <h4>${item.product.name}</h4>\n          <p>\\u{41A}\\u{43E}\\u{43B}\\u{438}\\u{447}\\u{435}\\u{441}\\u{442}\\u{432}\\u{43E}: ${item.quantity}</p>\n          <p>\\u{426}\\u{435}\\u{43D}\\u{430}: $${item.totalPrice.toFixed(2)}</p>\n        </div>\n      </div>\n    `).join('');\n        // Рендерим способы доставки\n        const deliveryMethods = document.querySelector('.delivery-methods');\n        const deliveryOptions = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getDeliveryMethods();\n        deliveryMethods.innerHTML = deliveryOptions.map((method)=>`\n      <label class=\"delivery-option\">\n        <input type=\"radio\" name=\"delivery\" value=\"${method.id}\" required>\n        <span class=\"option-info\">\n          <span class=\"option-name\">${method.icon} ${method.name}</span>\n          <span class=\"option-price\">$${method.price}</span>\n        </span>\n      </label>\n    `).join('');\n        // Рендерим способы оплаты\n        const paymentMethods = document.querySelector('.payment-methods');\n        const paymentOptions = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getPaymentMethods();\n        paymentMethods.innerHTML = paymentOptions.map((method)=>`\n      <label class=\"payment-option\">\n        <input type=\"radio\" name=\"payment\" value=\"${method.id}\" required>\n        <span class=\"option-info\">\n          <span class=\"option-name\">${method.icon} ${method.name}</span>\n        </span>\n      </label>\n    `).join('');\n        // Обновляем итоговую сумму\n        document.querySelector('.items-total').textContent = `$${total.toFixed(2)}`;\n        this.updateCheckoutTotal();\n        // Добавляем обработчики для обновления суммы при изменении доставки\n        deliveryMethods.addEventListener('change', ()=>this.updateCheckoutTotal());\n    }\n    updateCheckoutTotal() {\n        const selectedDelivery = document.querySelector('input[name=\"delivery\"]:checked');\n        const deliveryPrice = selectedDelivery ? (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getDeliveryMethods().find((m)=>m.id === selectedDelivery.value)?.price || 0 : 0;\n        const itemsTotal = this.getCartTotal();\n        const finalTotal = itemsTotal + deliveryPrice;\n        document.querySelector('.delivery-total').textContent = `$${deliveryPrice}`;\n        document.querySelector('.final-total').textContent = `$${finalTotal.toFixed(2)}`;\n    }\n    closeCheckout() {\n        const checkoutModal = document.querySelector('.checkout-modal');\n        if (checkoutModal) checkoutModal.style.display = 'none';\n    }\n    handleOrderSubmit(e) {\n        e.preventDefault();\n        const form = e.target;\n        const formData = new FormData(form);\n        // Собираем данные формы\n        const customerInfo = {\n            name: formData.get('name'),\n            phone: formData.get('phone'),\n            email: formData.get('email')\n        };\n        const delivery = formData.get('delivery');\n        const payment = formData.get('payment');\n        // Валидация\n        if (!customerInfo.name || !customerInfo.phone) {\n            this.showNotification(\"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435 \\u043E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044F\");\n            return;\n        }\n        if (!delivery) {\n            this.showNotification(\"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0432\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0441\\u043F\\u043E\\u0441\\u043E\\u0431 \\u0434\\u043E\\u0441\\u0442\\u0430\\u0432\\u043A\\u0438\");\n            return;\n        }\n        if (!payment) {\n            this.showNotification(\"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u0432\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0441\\u043F\\u043E\\u0441\\u043E\\u0431 \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B\");\n            return;\n        }\n        // Создаем заказ\n        const orderData = {\n            customerInfo: customerInfo,\n            delivery: delivery,\n            payment: payment\n        };\n        try {\n            const order = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).createOrder(orderData);\n            this.showNotification(`\\u{417}\\u{430}\\u{43A}\\u{430}\\u{437} #${order.id} \\u{443}\\u{441}\\u{43F}\\u{435}\\u{448}\\u{43D}\\u{43E} \\u{43E}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{43B}\\u{435}\\u{43D}!`);\n            this.closeCheckout();\n            this.updateCartDisplay();\n            // Показываем информацию о заказе\n            this.showOrderConfirmation(order);\n        } catch (error) {\n            this.showNotification(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0444\\u043E\\u0440\\u043C\\u043B\\u0435\\u043D\\u0438\\u0438 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430. \\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0435\\u0449\\u0435 \\u0440\\u0430\\u0437.\");\n            console.error('Order error:', error);\n        }\n    }\n    showOrderConfirmation(order) {\n        const deliveryMethod = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getDeliveryMethods().find((m)=>m.id === order.delivery);\n        const paymentMethod = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getPaymentMethods().find((m)=>m.id === order.payment);\n        const confirmationModal = document.createElement('div');\n        confirmationModal.className = 'confirmation-modal';\n        confirmationModal.innerHTML = `\n      <div class=\"confirmation-modal-content\">\n        <div class=\"confirmation-header\">\n          <h2>\\u{417}\\u{430}\\u{43A}\\u{430}\\u{437} \\u{443}\\u{441}\\u{43F}\\u{435}\\u{448}\\u{43D}\\u{43E} \\u{43E}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{43B}\\u{435}\\u{43D}!</h2>\n          <button class=\"close-confirmation\">&times;</button>\n        </div>\n        <div class=\"confirmation-body\">\n          <div class=\"order-info\">\n            <h3>\\u{418}\\u{43D}\\u{444}\\u{43E}\\u{440}\\u{43C}\\u{430}\\u{446}\\u{438}\\u{44F} \\u{43E} \\u{437}\\u{430}\\u{43A}\\u{430}\\u{437}\\u{435}</h3>\n            <p><strong>\\u{41D}\\u{43E}\\u{43C}\\u{435}\\u{440} \\u{437}\\u{430}\\u{43A}\\u{430}\\u{437}\\u{430}:</strong> #${order.id}</p>\n            <p><strong>\\u{414}\\u{430}\\u{442}\\u{430}:</strong> ${new Date(order.createdAt).toLocaleDateString('ru-RU')}</p>\n            <p><strong>\\u{421}\\u{442}\\u{430}\\u{442}\\u{443}\\u{441}:</strong> ${this.getOrderStatusText(order.status)}</p>\n          </div>\n          \n          <div class=\"delivery-info\">\n            <h3>\\u{414}\\u{43E}\\u{441}\\u{442}\\u{430}\\u{432}\\u{43A}\\u{430}</h3>\n            <p><strong>\\u{421}\\u{43F}\\u{43E}\\u{441}\\u{43E}\\u{431}:</strong> ${deliveryMethod.icon} ${deliveryMethod.name}</p>\n            <p><strong>\\u{421}\\u{442}\\u{43E}\\u{438}\\u{43C}\\u{43E}\\u{441}\\u{442}\\u{44C}:</strong> $${deliveryMethod.price}</p>\n          </div>\n          \n          <div class=\"payment-info\">\n            <h3>\\u{41E}\\u{43F}\\u{43B}\\u{430}\\u{442}\\u{430}</h3>\n            <p><strong>\\u{421}\\u{43F}\\u{43E}\\u{441}\\u{43E}\\u{431}:</strong> ${paymentMethod.icon} ${paymentMethod.name}</p>\n          </div>\n          \n          <div class=\"total-info\">\n            <h3>\\u{418}\\u{442}\\u{43E}\\u{433}\\u{43E} \\u{43A} \\u{43E}\\u{43F}\\u{43B}\\u{430}\\u{442}\\u{435}</h3>\n            <p class=\"total-amount\">$${order.total.toFixed(2)}</p>\n          </div>\n        </div>\n        <div class=\"confirmation-footer\">\n          <button class=\"btn close-confirmation\">\\u{417}\\u{430}\\u{43A}\\u{440}\\u{44B}\\u{442}\\u{44C}</button>\n        </div>\n      </div>\n    `;\n        document.body.appendChild(confirmationModal);\n        confirmationModal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1002;\n    `;\n        // Стили для модального окна подтверждения\n        const style = document.createElement('style');\n        style.textContent = `\n      .confirmation-modal-content {\n        background: white;\n        border-radius: 10px;\n        width: 90%;\n        max-width: 500px;\n        max-height: 80vh;\n        overflow-y: auto;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n      }\n      \n      .confirmation-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 20px;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .confirmation-header h2 {\n        margin: 0;\n        color: #4CAF50;\n        font-size: 24px;\n      }\n      \n      .close-confirmation {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n      }\n      \n      .confirmation-body {\n        padding: 20px;\n      }\n      \n      .confirmation-body h3 {\n        color: #333;\n        margin-bottom: 10px;\n        font-size: 18px;\n      }\n      \n      .confirmation-body p {\n        margin: 5px 0;\n        color: #666;\n      }\n      \n      .total-amount {\n        font-size: 24px;\n        font-weight: 700;\n        color: #2c5aa0;\n      }\n      \n      .confirmation-footer {\n        padding: 20px;\n        border-top: 1px solid #eee;\n        text-align: center;\n      }\n      \n      .confirmation-footer .btn {\n        padding: 12px 30px;\n        background: #2c5aa0;\n        color: white;\n        border: none;\n        border-radius: 6px;\n        font-size: 16px;\n        cursor: pointer;\n      }\n    `;\n        document.head.appendChild(style);\n        // Обработчики закрытия\n        const closeBtn = confirmationModal.querySelector('.close-confirmation');\n        closeBtn.addEventListener('click', ()=>{\n            confirmationModal.remove();\n            style.remove();\n        });\n        confirmationModal.addEventListener('click', (e)=>{\n            if (e.target === confirmationModal) {\n                confirmationModal.remove();\n                style.remove();\n            }\n        });\n    }\n    getOrderStatusText(status) {\n        const statusMap = {\n            'pending': \"\\u041E\\u0436\\u0438\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0438\",\n            'processing': \"\\u0412 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0435\",\n            'shipped': \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\",\n            'delivered': \"\\u0414\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u0435\\u043D\",\n            'cancelled': \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0435\\u043D\"\n        };\n        return statusMap[status] || status;\n    }\n    showNotification(message) {\n        // Создаем уведомление\n        const notification = document.createElement('div');\n        notification.className = 'notification';\n        notification.textContent = message;\n        notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #4CAF50;\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 10000;\n      animation: slideIn 0.3s ease;\n    `;\n        document.body.appendChild(notification);\n        // Удаляем уведомление через 3 секунды\n        setTimeout(()=>{\n            notification.remove();\n        }, 3000);\n    }\n}\nconst $915de8ffc4dd3149$export$a8d74af4063a6ef4 = new $915de8ffc4dd3149$export$7c8e4c531e203ab0();\n\n\n\nclass $b8f9c3659b9148b6$export$a8faf1410a7a0ce1 {\n    constructor(){\n        this.init();\n    }\n    init() {\n        // Создаем кнопку для открытия админ-панели (только для разработки)\n        this.createAdminButton();\n    }\n    createAdminButton() {\n        // Добавляем кнопку админ-панели только в режиме разработки\n        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n            const adminBtn = document.createElement('button');\n            adminBtn.textContent = \"\\u0410\\u0434\\u043C\\u0438\\u043D-\\u043F\\u0430\\u043D\\u0435\\u043B\\u044C\";\n            adminBtn.style.cssText = `\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        background: #ff4444;\n        color: white;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 5px;\n        cursor: pointer;\n        z-index: 1000;\n        font-size: 14px;\n      `;\n            adminBtn.addEventListener('click', ()=>this.openAdminPanel());\n            document.body.appendChild(adminBtn);\n        }\n    }\n    openAdminPanel() {\n        const orders = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getOrders();\n        const adminModal = document.createElement('div');\n        adminModal.className = 'admin-modal';\n        adminModal.innerHTML = `\n      <div class=\"admin-modal-content\">\n        <div class=\"admin-header\">\n          <h2>\\u{410}\\u{434}\\u{43C}\\u{438}\\u{43D}-\\u{43F}\\u{430}\\u{43D}\\u{435}\\u{43B}\\u{44C} - \\u{417}\\u{430}\\u{43A}\\u{430}\\u{437}\\u{44B}</h2>\n          <button class=\"close-admin\">&times;</button>\n        </div>\n        <div class=\"admin-body\">\n          ${orders.length === 0 ? \"<p>\\u0417\\u0430\\u043A\\u0430\\u0437\\u043E\\u0432 \\u043F\\u043E\\u043A\\u0430 \\u043D\\u0435\\u0442</p>\" : this.renderOrdersList(orders)}\n        </div>\n      </div>\n    `;\n        adminModal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1003;\n    `;\n        // Стили для админ-панели\n        const style = document.createElement('style');\n        style.textContent = `\n      .admin-modal-content {\n        background: white;\n        border-radius: 10px;\n        width: 90%;\n        max-width: 800px;\n        max-height: 80vh;\n        overflow-y: auto;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n      }\n      \n      .admin-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 20px;\n        border-bottom: 1px solid #eee;\n        background: #f8f9fa;\n      }\n      \n      .admin-header h2 {\n        margin: 0;\n        color: #333;\n      }\n      \n      .close-admin {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n      }\n      \n      .admin-body {\n        padding: 20px;\n      }\n      \n      .order-item {\n        border: 1px solid #ddd;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 15px;\n        background: #f9f9f9;\n      }\n      \n      .order-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 10px;\n        padding-bottom: 10px;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .order-id {\n        font-weight: 600;\n        color: #2c5aa0;\n      }\n      \n      .order-date {\n        color: #666;\n        font-size: 14px;\n      }\n      \n      .order-status {\n        padding: 4px 8px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 600;\n      }\n      \n      .status-pending {\n        background: #fff3cd;\n        color: #856404;\n      }\n      \n      .order-details {\n        margin-bottom: 10px;\n      }\n      \n      .order-items {\n        margin-bottom: 10px;\n      }\n      \n      .order-item-product {\n        display: flex;\n        justify-content: space-between;\n        padding: 5px 0;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .order-total {\n        font-weight: 600;\n        color: #2c5aa0;\n        font-size: 16px;\n      }\n      \n      .customer-info {\n        background: #f0f8ff;\n        padding: 10px;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .delivery-payment {\n        display: flex;\n        gap: 20px;\n        margin-bottom: 10px;\n      }\n      \n      .delivery-info, .payment-info {\n        flex: 1;\n        background: #f8f9fa;\n        padding: 10px;\n        border-radius: 5px;\n      }\n    `;\n        document.head.appendChild(style);\n        document.body.appendChild(adminModal);\n        // Обработчики закрытия\n        const closeBtn = adminModal.querySelector('.close-admin');\n        closeBtn.addEventListener('click', ()=>{\n            adminModal.remove();\n            style.remove();\n        });\n        adminModal.addEventListener('click', (e)=>{\n            if (e.target === adminModal) {\n                adminModal.remove();\n                style.remove();\n            }\n        });\n    }\n    renderOrdersList(orders) {\n        return orders.map((order)=>{\n            const deliveryMethod = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getDeliveryMethods().find((m)=>m.id === order.delivery);\n            const paymentMethod = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getPaymentMethods().find((m)=>m.id === order.payment);\n            return `\n        <div class=\"order-item\">\n          <div class=\"order-header\">\n            <span class=\"order-id\">\\u{417}\\u{430}\\u{43A}\\u{430}\\u{437} #${order.id}</span>\n            <span class=\"order-date\">${new Date(order.createdAt).toLocaleString('ru-RU')}</span>\n            <span class=\"order-status status-${order.status}\">${this.getOrderStatusText(order.status)}</span>\n          </div>\n          \n          <div class=\"customer-info\">\n            <strong>\\u{41A}\\u{43B}\\u{438}\\u{435}\\u{43D}\\u{442}:</strong> ${order.customerInfo.name}<br>\n            <strong>\\u{422}\\u{435}\\u{43B}\\u{435}\\u{444}\\u{43E}\\u{43D}:</strong> ${order.customerInfo.phone}<br>\n            ${order.customerInfo.email ? `<strong>Email:</strong> ${order.customerInfo.email}` : ''}\n          </div>\n          \n          <div class=\"order-items\">\n            <strong>\\u{422}\\u{43E}\\u{432}\\u{430}\\u{440}\\u{44B}:</strong>\n            ${order.items.map((item)=>{\n                const product = (0, $d5682f4c840b9378$export$f932f06c7eb6abeb).getProductById(item.productId);\n                return `\n                <div class=\"order-item-product\">\n                  <span>${product.name} x${item.quantity}</span>\n                  <span>$${(product.price * item.quantity).toFixed(2)}</span>\n                </div>\n              `;\n            }).join('')}\n          </div>\n          \n          <div class=\"delivery-payment\">\n            <div class=\"delivery-info\">\n              <strong>\\u{414}\\u{43E}\\u{441}\\u{442}\\u{430}\\u{432}\\u{43A}\\u{430}:</strong><br>\n              ${deliveryMethod.icon} ${deliveryMethod.name}<br>\n              <span style=\"color: #2c5aa0;\">$${deliveryMethod.price}</span>\n            </div>\n            <div class=\"payment-info\">\n              <strong>\\u{41E}\\u{43F}\\u{43B}\\u{430}\\u{442}\\u{430}:</strong><br>\n              ${paymentMethod.icon} ${paymentMethod.name}\n            </div>\n          </div>\n          \n          <div class=\"order-total\">\n            \\u{418}\\u{442}\\u{43E}\\u{433}\\u{43E}: $${order.total.toFixed(2)}\n          </div>\n        </div>\n      `;\n        }).join('');\n    }\n    getOrderStatusText(status) {\n        const statusMap = {\n            'pending': \"\\u041E\\u0436\\u0438\\u0434\\u0430\\u0435\\u0442 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0438\",\n            'processing': \"\\u0412 \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0435\",\n            'shipped': \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\",\n            'delivered': \"\\u0414\\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u0435\\u043D\",\n            'cancelled': \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0435\\u043D\"\n        };\n        return statusMap[status] || status;\n    }\n}\nconst $b8f9c3659b9148b6$export$7963dc726b9e7524 = new $b8f9c3659b9148b6$export$a8faf1410a7a0ce1();\n\n\n// Initialize all modules\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    (0, $8a7e756c566dd1ea$export$60523367a7e10402)();\n    (0, $6442e51d8b52aaf7$export$6346f9d5a99783bd)();\n    (0, $515766f963839bcb$export$dd52d3a8aed5a5e8)();\n});\n\n\n//# sourceMappingURL=bose-test.c80d5277.js.map\n","import { initModal } from './js/modal.js';\nimport { initBurgerMenu } from './js/burger-menu.js';\nimport { initKeyboard } from './js/keyboard.js';\nimport './js/like-toggle.js';\nimport './js/cart.js';\nimport './js/admin.js';\n\n// Initialize all modules\ndocument.addEventListener('DOMContentLoaded', () => {\n  initModal();\n  initBurgerMenu();\n  initKeyboard();\n});\n","const modal = document.getElementById('modal');\nconst openButtons = document.querySelectorAll('[data-open-modal]');\nconst closeButtons = document.querySelectorAll('[data-close-modal], .modal-backdrop, .modal-close');\n\nfunction openModal() {\n  if (!modal) return;\n  modal.setAttribute('aria-hidden', 'false');\n  document.body.style.overflow = 'hidden';\n  const firstInput = modal.querySelector('input');\n  if (firstInput) {\n    setTimeout(() => firstInput.focus(), 50);\n  }\n}\n\nfunction closeModal() {\n  if (!modal) return;\n  modal.setAttribute('aria-hidden', 'true');\n  document.body.style.overflow = '';\n}\n\nexport function initModal() {\n  openButtons.forEach(btn => btn.addEventListener('click', openModal));\n  closeButtons.forEach(btn => btn.addEventListener('click', closeModal));\n\n  // Form handling\n  const form = document.querySelector('.modal-form');\n  if (form) {\n    form.addEventListener('submit', e => {\n      e.preventDefault();\n      closeModal();\n      alert('Спасибо! Мы свяжемся с вами.');\n      form.reset();\n    });\n  }\n}\n\nexport { openModal, closeModal };\n","const burgerMenu = document.getElementById('burger-menu');\nconst openBurgerButtons = document.querySelectorAll('[data-open-burger]');\nconst closeBurgerButtons = document.querySelectorAll('[data-close-burger]');\n\nfunction openBurgerMenu() {\n  if (!burgerMenu) return;\n  burgerMenu.setAttribute('aria-hidden', 'false');\n  // document.body.style.overflow = 'hidden';\n}\n\nfunction closeBurgerMenu() {\n  if (!burgerMenu) return;\n  burgerMenu.setAttribute('aria-hidden', 'true');\n  // document.body.style.overflow = '';\n}\n\nexport function initBurgerMenu() {\n  openBurgerButtons.forEach(btn => btn.addEventListener('click', openBurgerMenu));\n  closeBurgerButtons.forEach(btn => btn.addEventListener('click', closeBurgerMenu));\n}\n\nexport { openBurgerMenu, closeBurgerMenu };\n","import { closeModal } from './modal.js';\nimport { closeBurgerMenu } from './burger-menu.js';\n\nexport function initKeyboard() {\n  document.addEventListener('keydown', e => {\n    if (e.key === 'Escape') {\n      closeModal();\n      closeBurgerMenu();\n    }\n  });\n}\n","// document.querySelectorAll('.icon-like').forEach(icon => {\n//   icon.addEventListener('click', () => {\n//     icon.classList.toggle('active');\n//   });\n// });\n\n// цей варіант подобається\ndocument.querySelectorAll('.icon-like').forEach((like, index) => {\n  const key = `product-${index}-liked`;\n\n  if (localStorage.getItem(key) === '1') {\n    like.classList.add('active');\n  }\n\n  like.addEventListener('click', () => {\n    like.classList.toggle('active');\n    if (like.classList.contains('active')) {\n      localStorage.setItem(key, '1');\n    } else {\n      localStorage.removeItem(key);\n    }\n  });\n});\n","import { db } from './database.js';\n\nexport class CartManager {\n  constructor() {\n    this.cart = [];\n    this.init();\n  }\n\n  init() {\n    this.bindEvents();\n    this.updateCartDisplay();\n  }\n\n  bindEvents() {\n    // Обработчики для кнопок \"В корзину\"\n    document.addEventListener('click', (e) => {\n      if (e.target.textContent === 'В корзину' || e.target.textContent.trim() === 'В корзину') {\n        e.preventDefault();\n        const card = e.target.closest('.card');\n        if (card) {\n          this.addToCartFromCard(card);\n        }\n      }\n    });\n\n    // Обработчики для кнопок \"Купить\" (добавляем в корзину и открываем корзину)\n    document.addEventListener('click', (e) => {\n      if (e.target.textContent === 'Купить' || e.target.textContent.trim() === 'Купить') {\n        e.preventDefault();\n        const card = e.target.closest('.card');\n        if (card) {\n          this.addToCartFromCard(card);\n          this.openCart();\n        }\n      }\n    });\n\n    // Обработчик для кнопки корзины в header\n    document.addEventListener('click', (e) => {\n      if (e.target.closest('[data-open-cart]')) {\n        e.preventDefault();\n        this.openCart();\n      }\n    });\n  }\n\n  addToCartFromCard(card) {\n    const title = card.querySelector('.card-title');\n    const price = card.querySelector('.card-price');\n    \n    if (title && price) {\n      const productName = title.textContent.trim();\n      const productPrice = parseFloat(price.textContent.replace(/[^0-9.]/g, ''));\n      \n      // Находим товар в базе данных по названию\n      const product = db.getProducts().find(p => p.name === productName);\n      \n      if (product) {\n        const success = db.addToCart(product.id, 1);\n        if (success) {\n          this.showNotification('Товар добавлен в корзину!');\n          this.updateCartDisplay();\n        }\n      }\n    }\n  }\n\n  addToCart(productId, quantity = 1) {\n    const success = db.addToCart(productId, quantity);\n    if (success) {\n      this.updateCartDisplay();\n      return true;\n    }\n    return false;\n  }\n\n  removeFromCart(productId) {\n    db.removeFromCart(productId);\n    this.updateCartDisplay();\n  }\n\n  updateCartItemQuantity(productId, quantity) {\n    db.updateCartItemQuantity(productId, quantity);\n    this.updateCartDisplay();\n  }\n\n  getCart() {\n    return db.getCart();\n  }\n\n  getCartTotal() {\n    return db.getCartTotal();\n  }\n\n  clearCart() {\n    db.clearCart();\n    this.updateCartDisplay();\n  }\n\n  updateCartDisplay() {\n    const cart = this.getCart();\n    const total = this.getCartTotal();\n    \n    // Обновляем счетчик товаров в корзине (если есть)\n    const cartCounter = document.querySelector('.cart-counter');\n    if (cartCounter) {\n      const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);\n      cartCounter.textContent = totalItems;\n      cartCounter.style.display = totalItems > 0 ? 'block' : 'none';\n    }\n\n    // Обновляем содержимое корзины если она открыта\n    const cartModal = document.querySelector('.cart-modal');\n    if (cartModal && cartModal.style.display !== 'none') {\n      this.renderCartItems();\n    }\n  }\n\n  renderCartItems() {\n    const cartItemsContainer = document.querySelector('.cart-items');\n    if (!cartItemsContainer) return;\n\n    const cart = this.getCart();\n    \n    if (cart.length === 0) {\n      cartItemsContainer.innerHTML = '<p class=\"empty-cart\">Корзина пуста</p>';\n      return;\n    }\n\n    cartItemsContainer.innerHTML = cart.map(item => `\n      <div class=\"cart-item\" data-product-id=\"${item.productId}\">\n        <div class=\"cart-item-image\">\n          <img src=\"${item.product.image}\" alt=\"${item.product.name}\" />\n        </div>\n        <div class=\"cart-item-details\">\n          <h4 class=\"cart-item-title\">${item.product.name}</h4>\n          <p class=\"cart-item-category\">${item.product.category}</p>\n          <div class=\"cart-item-controls\">\n            <button class=\"quantity-btn minus\" data-product-id=\"${item.productId}\">-</button>\n            <span class=\"quantity\">${item.quantity}</span>\n            <button class=\"quantity-btn plus\" data-product-id=\"${item.productId}\">+</button>\n            <button class=\"remove-btn\" data-product-id=\"${item.productId}\">×</button>\n          </div>\n        </div>\n        <div class=\"cart-item-price\">\n          <span class=\"price\">$${item.totalPrice.toFixed(2)}</span>\n        </div>\n      </div>\n    `).join('');\n\n    // Добавляем обработчики для кнопок управления количеством\n    cartItemsContainer.addEventListener('click', (e) => {\n      const productId = parseInt(e.target.dataset.productId);\n      \n      if (e.target.classList.contains('minus')) {\n        const item = cart.find(item => item.productId === productId);\n        if (item && item.quantity > 1) {\n          this.updateCartItemQuantity(productId, item.quantity - 1);\n        } else {\n          this.removeFromCart(productId);\n        }\n      } else if (e.target.classList.contains('plus')) {\n        const item = cart.find(item => item.productId === productId);\n        if (item) {\n          this.updateCartItemQuantity(productId, item.quantity + 1);\n        }\n      } else if (e.target.classList.contains('remove-btn')) {\n        this.removeFromCart(productId);\n      }\n    });\n\n    // Обновляем общую сумму\n    const totalElement = document.querySelector('.cart-total');\n    if (totalElement) {\n      totalElement.textContent = `$${this.getCartTotal().toFixed(2)}`;\n    }\n  }\n\n  openCart() {\n    // Создаем модальное окно корзины если его нет\n    let cartModal = document.querySelector('.cart-modal');\n    if (!cartModal) {\n      cartModal = this.createCartModal();\n      document.body.appendChild(cartModal);\n    }\n\n    this.renderCartItems();\n    cartModal.style.display = 'flex';\n    document.body.style.overflow = 'hidden';\n  }\n\n  closeCart() {\n    const cartModal = document.querySelector('.cart-modal');\n    if (cartModal) {\n      cartModal.style.display = 'none';\n      document.body.style.overflow = 'auto';\n    }\n  }\n\n  createCartModal() {\n    const modal = document.createElement('div');\n    modal.className = 'cart-modal';\n    modal.innerHTML = `\n      <div class=\"cart-modal-content\">\n        <div class=\"cart-header\">\n          <h2>Корзина</h2>\n          <button class=\"close-cart\">&times;</button>\n        </div>\n        <div class=\"cart-items\"></div>\n        <div class=\"cart-footer\">\n          <div class=\"cart-total-section\">\n            <span class=\"total-label\">Итого:</span>\n            <span class=\"cart-total\">$0.00</span>\n          </div>\n          <button class=\"btn checkout-btn\">Оформить заказ</button>\n        </div>\n      </div>\n    `;\n\n    // Добавляем обработчики событий\n    modal.querySelector('.close-cart').addEventListener('click', () => this.closeCart());\n    modal.querySelector('.checkout-btn').addEventListener('click', () => this.openCheckout());\n    \n    // Закрытие по клику вне модального окна\n    modal.addEventListener('click', (e) => {\n      if (e.target === modal) {\n        this.closeCart();\n      }\n    });\n\n    return modal;\n  }\n\n  openCheckout() {\n    const cart = this.getCart();\n    if (cart.length === 0) {\n      this.showNotification('Корзина пуста!');\n      return;\n    }\n\n    // Создаем модальное окно оформления заказа\n    let checkoutModal = document.querySelector('.checkout-modal');\n    if (!checkoutModal) {\n      checkoutModal = this.createCheckoutModal();\n      document.body.appendChild(checkoutModal);\n    }\n\n    this.renderCheckoutForm();\n    checkoutModal.style.display = 'flex';\n    this.closeCart();\n  }\n\n  createCheckoutModal() {\n    const modal = document.createElement('div');\n    modal.className = 'checkout-modal';\n    modal.innerHTML = `\n      <div class=\"checkout-modal-content\">\n        <div class=\"checkout-header\">\n          <h2>Оформление заказа</h2>\n          <button class=\"close-checkout\">&times;</button>\n        </div>\n        <form class=\"checkout-form\">\n          <div class=\"checkout-items\"></div>\n          \n          <div class=\"form-section\">\n            <h3>Контактная информация</h3>\n            <div class=\"form-group\">\n              <label for=\"customer-name\">Имя *</label>\n              <input type=\"text\" id=\"customer-name\" name=\"name\" required>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"customer-phone\">Телефон *</label>\n              <input type=\"tel\" id=\"customer-phone\" name=\"phone\" required>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"customer-email\">Email</label>\n              <input type=\"email\" id=\"customer-email\" name=\"email\">\n            </div>\n          </div>\n\n          <div class=\"form-section\">\n            <h3>Способ доставки</h3>\n            <div class=\"delivery-methods\"></div>\n          </div>\n\n          <div class=\"form-section\">\n            <h3>Способ оплаты</h3>\n            <div class=\"payment-methods\"></div>\n          </div>\n\n          <div class=\"checkout-total\">\n            <div class=\"total-line\">\n              <span>Товары:</span>\n              <span class=\"items-total\">$0.00</span>\n            </div>\n            <div class=\"total-line\">\n              <span>Доставка:</span>\n              <span class=\"delivery-total\">$0.00</span>\n            </div>\n            <div class=\"total-line total-final\">\n              <span>Итого:</span>\n              <span class=\"final-total\">$0.00</span>\n            </div>\n          </div>\n\n          <button type=\"submit\" class=\"btn submit-order\">Подтвердить заказ</button>\n        </form>\n      </div>\n    `;\n\n    // Добавляем обработчики событий\n    modal.querySelector('.close-checkout').addEventListener('click', () => this.closeCheckout());\n    \n    modal.addEventListener('click', (e) => {\n      if (e.target === modal) {\n        this.closeCheckout();\n      }\n    });\n\n    // Обработчик формы заказа\n    const form = modal.querySelector('.checkout-form');\n    form.addEventListener('submit', (e) => this.handleOrderSubmit(e));\n\n    return modal;\n  }\n\n  renderCheckoutForm() {\n    const cart = this.getCart();\n    const total = this.getCartTotal();\n    \n    // Рендерим товары в заказе\n    const checkoutItems = document.querySelector('.checkout-items');\n    checkoutItems.innerHTML = cart.map(item => `\n      <div class=\"checkout-item\">\n        <img src=\"${item.product.image}\" alt=\"${item.product.name}\" />\n        <div class=\"checkout-item-info\">\n          <h4>${item.product.name}</h4>\n          <p>Количество: ${item.quantity}</p>\n          <p>Цена: $${item.totalPrice.toFixed(2)}</p>\n        </div>\n      </div>\n    `).join('');\n\n    // Рендерим способы доставки\n    const deliveryMethods = document.querySelector('.delivery-methods');\n    const deliveryOptions = db.getDeliveryMethods();\n    deliveryMethods.innerHTML = deliveryOptions.map(method => `\n      <label class=\"delivery-option\">\n        <input type=\"radio\" name=\"delivery\" value=\"${method.id}\" required>\n        <span class=\"option-info\">\n          <span class=\"option-name\">${method.icon} ${method.name}</span>\n          <span class=\"option-price\">$${method.price}</span>\n        </span>\n      </label>\n    `).join('');\n\n    // Рендерим способы оплаты\n    const paymentMethods = document.querySelector('.payment-methods');\n    const paymentOptions = db.getPaymentMethods();\n    paymentMethods.innerHTML = paymentOptions.map(method => `\n      <label class=\"payment-option\">\n        <input type=\"radio\" name=\"payment\" value=\"${method.id}\" required>\n        <span class=\"option-info\">\n          <span class=\"option-name\">${method.icon} ${method.name}</span>\n        </span>\n      </label>\n    `).join('');\n\n    // Обновляем итоговую сумму\n    document.querySelector('.items-total').textContent = `$${total.toFixed(2)}`;\n    this.updateCheckoutTotal();\n\n    // Добавляем обработчики для обновления суммы при изменении доставки\n    deliveryMethods.addEventListener('change', () => this.updateCheckoutTotal());\n  }\n\n  updateCheckoutTotal() {\n    const selectedDelivery = document.querySelector('input[name=\"delivery\"]:checked');\n    const deliveryPrice = selectedDelivery ? \n      db.getDeliveryMethods().find(m => m.id === selectedDelivery.value)?.price || 0 : 0;\n    \n    const itemsTotal = this.getCartTotal();\n    const finalTotal = itemsTotal + deliveryPrice;\n\n    document.querySelector('.delivery-total').textContent = `$${deliveryPrice}`;\n    document.querySelector('.final-total').textContent = `$${finalTotal.toFixed(2)}`;\n  }\n\n  closeCheckout() {\n    const checkoutModal = document.querySelector('.checkout-modal');\n    if (checkoutModal) {\n      checkoutModal.style.display = 'none';\n    }\n  }\n\n  handleOrderSubmit(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const formData = new FormData(form);\n    \n    // Собираем данные формы\n    const customerInfo = {\n      name: formData.get('name'),\n      phone: formData.get('phone'),\n      email: formData.get('email')\n    };\n    \n    const delivery = formData.get('delivery');\n    const payment = formData.get('payment');\n    \n    // Валидация\n    if (!customerInfo.name || !customerInfo.phone) {\n      this.showNotification('Пожалуйста, заполните обязательные поля');\n      return;\n    }\n    \n    if (!delivery) {\n      this.showNotification('Пожалуйста, выберите способ доставки');\n      return;\n    }\n    \n    if (!payment) {\n      this.showNotification('Пожалуйста, выберите способ оплаты');\n      return;\n    }\n    \n    // Создаем заказ\n    const orderData = {\n      customerInfo,\n      delivery,\n      payment\n    };\n    \n    try {\n      const order = db.createOrder(orderData);\n      this.showNotification(`Заказ #${order.id} успешно оформлен!`);\n      this.closeCheckout();\n      this.updateCartDisplay();\n      \n      // Показываем информацию о заказе\n      this.showOrderConfirmation(order);\n    } catch (error) {\n      this.showNotification('Ошибка при оформлении заказа. Попробуйте еще раз.');\n      console.error('Order error:', error);\n    }\n  }\n\n  showOrderConfirmation(order) {\n    const deliveryMethod = db.getDeliveryMethods().find(m => m.id === order.delivery);\n    const paymentMethod = db.getPaymentMethods().find(m => m.id === order.payment);\n    \n    const confirmationModal = document.createElement('div');\n    confirmationModal.className = 'confirmation-modal';\n    confirmationModal.innerHTML = `\n      <div class=\"confirmation-modal-content\">\n        <div class=\"confirmation-header\">\n          <h2>Заказ успешно оформлен!</h2>\n          <button class=\"close-confirmation\">&times;</button>\n        </div>\n        <div class=\"confirmation-body\">\n          <div class=\"order-info\">\n            <h3>Информация о заказе</h3>\n            <p><strong>Номер заказа:</strong> #${order.id}</p>\n            <p><strong>Дата:</strong> ${new Date(order.createdAt).toLocaleDateString('ru-RU')}</p>\n            <p><strong>Статус:</strong> ${this.getOrderStatusText(order.status)}</p>\n          </div>\n          \n          <div class=\"delivery-info\">\n            <h3>Доставка</h3>\n            <p><strong>Способ:</strong> ${deliveryMethod.icon} ${deliveryMethod.name}</p>\n            <p><strong>Стоимость:</strong> $${deliveryMethod.price}</p>\n          </div>\n          \n          <div class=\"payment-info\">\n            <h3>Оплата</h3>\n            <p><strong>Способ:</strong> ${paymentMethod.icon} ${paymentMethod.name}</p>\n          </div>\n          \n          <div class=\"total-info\">\n            <h3>Итого к оплате</h3>\n            <p class=\"total-amount\">$${order.total.toFixed(2)}</p>\n          </div>\n        </div>\n        <div class=\"confirmation-footer\">\n          <button class=\"btn close-confirmation\">Закрыть</button>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(confirmationModal);\n    confirmationModal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1002;\n    `;\n    \n    // Стили для модального окна подтверждения\n    const style = document.createElement('style');\n    style.textContent = `\n      .confirmation-modal-content {\n        background: white;\n        border-radius: 10px;\n        width: 90%;\n        max-width: 500px;\n        max-height: 80vh;\n        overflow-y: auto;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n      }\n      \n      .confirmation-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 20px;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .confirmation-header h2 {\n        margin: 0;\n        color: #4CAF50;\n        font-size: 24px;\n      }\n      \n      .close-confirmation {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n      }\n      \n      .confirmation-body {\n        padding: 20px;\n      }\n      \n      .confirmation-body h3 {\n        color: #333;\n        margin-bottom: 10px;\n        font-size: 18px;\n      }\n      \n      .confirmation-body p {\n        margin: 5px 0;\n        color: #666;\n      }\n      \n      .total-amount {\n        font-size: 24px;\n        font-weight: 700;\n        color: #2c5aa0;\n      }\n      \n      .confirmation-footer {\n        padding: 20px;\n        border-top: 1px solid #eee;\n        text-align: center;\n      }\n      \n      .confirmation-footer .btn {\n        padding: 12px 30px;\n        background: #2c5aa0;\n        color: white;\n        border: none;\n        border-radius: 6px;\n        font-size: 16px;\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    // Обработчики закрытия\n    const closeBtn = confirmationModal.querySelector('.close-confirmation');\n    closeBtn.addEventListener('click', () => {\n      confirmationModal.remove();\n      style.remove();\n    });\n    \n    confirmationModal.addEventListener('click', (e) => {\n      if (e.target === confirmationModal) {\n        confirmationModal.remove();\n        style.remove();\n      }\n    });\n  }\n\n  getOrderStatusText(status) {\n    const statusMap = {\n      'pending': 'Ожидает обработки',\n      'processing': 'В обработке',\n      'shipped': 'Отправлен',\n      'delivered': 'Доставлен',\n      'cancelled': 'Отменен'\n    };\n    return statusMap[status] || status;\n  }\n\n  showNotification(message) {\n    // Создаем уведомление\n    const notification = document.createElement('div');\n    notification.className = 'notification';\n    notification.textContent = message;\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #4CAF50;\n      color: white;\n      padding: 15px 20px;\n      border-radius: 5px;\n      z-index: 10000;\n      animation: slideIn 0.3s ease;\n    `;\n\n    document.body.appendChild(notification);\n\n    // Удаляем уведомление через 3 секунды\n    setTimeout(() => {\n      notification.remove();\n    }, 3000);\n  }\n}\n\n// Инициализируем менеджер корзины\nexport const cartManager = new CartManager();\n","// Имитация базы данных для товаров и заказов\nexport class Database {\n  constructor() {\n    this.products = [\n      {\n        id: 1,\n        name: \"Bose portable Smart speaker\",\n        category: \"Smart home\",\n        price: 399.00,\n        image: \"img/products/Bose_portable_Smart_speaker_desk.png\",\n        description: \"Портативная умная колонка с голосовым управлением\"\n      },\n      {\n        id: 2,\n        name: \"SoundLink Flex Bluetooth speaker\",\n        category: \"Portable bluetooth\",\n        price: 149.00,\n        image: \"img/products/Portable_bluetooth_desk.png\",\n        description: \"Портативная Bluetooth колонка с водонепроницаемостью\"\n      },\n      {\n        id: 3,\n        name: \"SoundLink Color Bluetooth speaker II\",\n        category: \"Portable bluetooth\",\n        price: 129.00,\n        image: \"img/products/Portable_bluetooth_II_desk.png\",\n        description: \"Цветная портативная Bluetooth колонка\"\n      }\n    ];\n\n    this.cart = [];\n    this.orders = [];\n    this.paymentMethods = [\n      { id: 'card', name: 'Банковская карта', icon: '💳' },\n      { id: 'cash', name: 'Наличные при получении', icon: '💵' },\n      { id: 'online', name: 'Онлайн оплата', icon: '🌐' }\n    ];\n    this.deliveryMethods = [\n      { id: 'ukrpost', name: 'Укрпошта', price: 50, icon: '📮' },\n      { id: 'novapost', name: 'Нова пошта', price: 80, icon: '🚚' }\n    ];\n  }\n\n  // Получить все товары\n  getProducts() {\n    return this.products;\n  }\n\n  // Получить товар по ID\n  getProductById(id) {\n    return this.products.find(product => product.id === id);\n  }\n\n  // Добавить товар в корзину\n  addToCart(productId, quantity = 1) {\n    const product = this.getProductById(productId);\n    if (!product) return false;\n\n    const existingItem = this.cart.find(item => item.productId === productId);\n    if (existingItem) {\n      existingItem.quantity += quantity;\n    } else {\n      this.cart.push({\n        productId,\n        quantity,\n        addedAt: new Date()\n      });\n    }\n    return true;\n  }\n\n  // Удалить товар из корзины\n  removeFromCart(productId) {\n    this.cart = this.cart.filter(item => item.productId !== productId);\n  }\n\n  // Обновить количество товара в корзине\n  updateCartItemQuantity(productId, quantity) {\n    const item = this.cart.find(item => item.productId === productId);\n    if (item) {\n      if (quantity <= 0) {\n        this.removeFromCart(productId);\n      } else {\n        item.quantity = quantity;\n      }\n    }\n  }\n\n  // Получить корзину\n  getCart() {\n    return this.cart.map(cartItem => {\n      const product = this.getProductById(cartItem.productId);\n      return {\n        ...cartItem,\n        product,\n        totalPrice: product.price * cartItem.quantity\n      };\n    });\n  }\n\n  // Получить общую стоимость корзины\n  getCartTotal() {\n    return this.cart.reduce((total, item) => {\n      const product = this.getProductById(item.productId);\n      return total + (product.price * item.quantity);\n    }, 0);\n  }\n\n  // Очистить корзину\n  clearCart() {\n    this.cart = [];\n  }\n\n  // Создать заказ\n  createOrder(orderData) {\n    const order = {\n      id: Date.now(),\n      items: [...this.cart],\n      total: this.getCartTotal(),\n      delivery: orderData.delivery,\n      payment: orderData.payment,\n      customerInfo: orderData.customerInfo,\n      status: 'pending',\n      createdAt: new Date()\n    };\n    \n    this.orders.push(order);\n    this.clearCart();\n    return order;\n  }\n\n  // Получить все заказы\n  getOrders() {\n    return this.orders;\n  }\n\n  // Получить способы оплаты\n  getPaymentMethods() {\n    return this.paymentMethods;\n  }\n\n  // Получить способы доставки\n  getDeliveryMethods() {\n    return this.deliveryMethods;\n  }\n}\n\n// Создаем глобальный экземпляр базы данных\nexport const db = new Database();\n","import { db } from './database.js';\n\nexport class AdminPanel {\n  constructor() {\n    this.init();\n  }\n\n  init() {\n    // Создаем кнопку для открытия админ-панели (только для разработки)\n    this.createAdminButton();\n  }\n\n  createAdminButton() {\n    // Добавляем кнопку админ-панели только в режиме разработки\n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n      const adminBtn = document.createElement('button');\n      adminBtn.textContent = 'Админ-панель';\n      adminBtn.style.cssText = `\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        background: #ff4444;\n        color: white;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 5px;\n        cursor: pointer;\n        z-index: 1000;\n        font-size: 14px;\n      `;\n      \n      adminBtn.addEventListener('click', () => this.openAdminPanel());\n      document.body.appendChild(adminBtn);\n    }\n  }\n\n  openAdminPanel() {\n    const orders = db.getOrders();\n    \n    const adminModal = document.createElement('div');\n    adminModal.className = 'admin-modal';\n    adminModal.innerHTML = `\n      <div class=\"admin-modal-content\">\n        <div class=\"admin-header\">\n          <h2>Админ-панель - Заказы</h2>\n          <button class=\"close-admin\">&times;</button>\n        </div>\n        <div class=\"admin-body\">\n          ${orders.length === 0 ? \n            '<p>Заказов пока нет</p>' : \n            this.renderOrdersList(orders)\n          }\n        </div>\n      </div>\n    `;\n    \n    adminModal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1003;\n    `;\n    \n    // Стили для админ-панели\n    const style = document.createElement('style');\n    style.textContent = `\n      .admin-modal-content {\n        background: white;\n        border-radius: 10px;\n        width: 90%;\n        max-width: 800px;\n        max-height: 80vh;\n        overflow-y: auto;\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n      }\n      \n      .admin-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 20px;\n        border-bottom: 1px solid #eee;\n        background: #f8f9fa;\n      }\n      \n      .admin-header h2 {\n        margin: 0;\n        color: #333;\n      }\n      \n      .close-admin {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n      }\n      \n      .admin-body {\n        padding: 20px;\n      }\n      \n      .order-item {\n        border: 1px solid #ddd;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 15px;\n        background: #f9f9f9;\n      }\n      \n      .order-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 10px;\n        padding-bottom: 10px;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .order-id {\n        font-weight: 600;\n        color: #2c5aa0;\n      }\n      \n      .order-date {\n        color: #666;\n        font-size: 14px;\n      }\n      \n      .order-status {\n        padding: 4px 8px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 600;\n      }\n      \n      .status-pending {\n        background: #fff3cd;\n        color: #856404;\n      }\n      \n      .order-details {\n        margin-bottom: 10px;\n      }\n      \n      .order-items {\n        margin-bottom: 10px;\n      }\n      \n      .order-item-product {\n        display: flex;\n        justify-content: space-between;\n        padding: 5px 0;\n        border-bottom: 1px solid #eee;\n      }\n      \n      .order-total {\n        font-weight: 600;\n        color: #2c5aa0;\n        font-size: 16px;\n      }\n      \n      .customer-info {\n        background: #f0f8ff;\n        padding: 10px;\n        border-radius: 5px;\n        margin-bottom: 10px;\n      }\n      \n      .delivery-payment {\n        display: flex;\n        gap: 20px;\n        margin-bottom: 10px;\n      }\n      \n      .delivery-info, .payment-info {\n        flex: 1;\n        background: #f8f9fa;\n        padding: 10px;\n        border-radius: 5px;\n      }\n    `;\n    document.head.appendChild(style);\n    \n    document.body.appendChild(adminModal);\n    \n    // Обработчики закрытия\n    const closeBtn = adminModal.querySelector('.close-admin');\n    closeBtn.addEventListener('click', () => {\n      adminModal.remove();\n      style.remove();\n    });\n    \n    adminModal.addEventListener('click', (e) => {\n      if (e.target === adminModal) {\n        adminModal.remove();\n        style.remove();\n      }\n    });\n  }\n\n  renderOrdersList(orders) {\n    return orders.map(order => {\n      const deliveryMethod = db.getDeliveryMethods().find(m => m.id === order.delivery);\n      const paymentMethod = db.getPaymentMethods().find(m => m.id === order.payment);\n      \n      return `\n        <div class=\"order-item\">\n          <div class=\"order-header\">\n            <span class=\"order-id\">Заказ #${order.id}</span>\n            <span class=\"order-date\">${new Date(order.createdAt).toLocaleString('ru-RU')}</span>\n            <span class=\"order-status status-${order.status}\">${this.getOrderStatusText(order.status)}</span>\n          </div>\n          \n          <div class=\"customer-info\">\n            <strong>Клиент:</strong> ${order.customerInfo.name}<br>\n            <strong>Телефон:</strong> ${order.customerInfo.phone}<br>\n            ${order.customerInfo.email ? `<strong>Email:</strong> ${order.customerInfo.email}` : ''}\n          </div>\n          \n          <div class=\"order-items\">\n            <strong>Товары:</strong>\n            ${order.items.map(item => {\n              const product = db.getProductById(item.productId);\n              return `\n                <div class=\"order-item-product\">\n                  <span>${product.name} x${item.quantity}</span>\n                  <span>$${(product.price * item.quantity).toFixed(2)}</span>\n                </div>\n              `;\n            }).join('')}\n          </div>\n          \n          <div class=\"delivery-payment\">\n            <div class=\"delivery-info\">\n              <strong>Доставка:</strong><br>\n              ${deliveryMethod.icon} ${deliveryMethod.name}<br>\n              <span style=\"color: #2c5aa0;\">$${deliveryMethod.price}</span>\n            </div>\n            <div class=\"payment-info\">\n              <strong>Оплата:</strong><br>\n              ${paymentMethod.icon} ${paymentMethod.name}\n            </div>\n          </div>\n          \n          <div class=\"order-total\">\n            Итого: $${order.total.toFixed(2)}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  getOrderStatusText(status) {\n    const statusMap = {\n      'pending': 'Ожидает обработки',\n      'processing': 'В обработке',\n      'shipped': 'Отправлен',\n      'delivered': 'Доставлен',\n      'cancelled': 'Отменен'\n    };\n    return statusMap[status] || status;\n  }\n}\n\n// Инициализируем админ-панель\nexport const adminPanel = new AdminPanel();\n"],"names":["$8a7e756c566dd1ea$var$modal","document","getElementById","$8a7e756c566dd1ea$var$openButtons","querySelectorAll","$8a7e756c566dd1ea$var$closeButtons","$8a7e756c566dd1ea$export$a7f6cffb6b8ba11c","setAttribute","body","style","overflow","firstInput","querySelector","setTimeout","focus","$8a7e756c566dd1ea$export$3f6fecd573f3fa48","$6442e51d8b52aaf7$var$burgerMenu","$6442e51d8b52aaf7$var$openBurgerButtons","$6442e51d8b52aaf7$var$closeBurgerButtons","$6442e51d8b52aaf7$export$71f4ca44c756a50e","$6442e51d8b52aaf7$export$53986d5aeb390955","forEach","like","index","key","localStorage","getItem","classList","add","addEventListener","toggle","contains","setItem","removeItem","$d5682f4c840b9378$export$f932f06c7eb6abeb","products","id","name","category","price","image","description","cart","orders","paymentMethods","icon","deliveryMethods","getProducts","getProductById","find","product","addToCart","productId","quantity","existingItem","item","push","addedAt","Date","removeFromCart","filter","updateCartItemQuantity","getCart","map","cartItem","totalPrice","getCartTotal","reduce","total","clearCart","createOrder","orderData","order","now","items","delivery","payment","customerInfo","status","createdAt","getOrders","getPaymentMethods","getDeliveryMethods","init","bindEvents","updateCartDisplay","e","target","textContent","trim","preventDefault","card","closest","addToCartFromCard","openCart","title","productName","parseFloat","replace","p","showNotification","cartCounter","totalItems","sum","display","cartModal","renderCartItems","cartItemsContainer","length","innerHTML","toFixed","join","parseInt","dataset","totalElement","createCartModal","appendChild","closeCart","modal","createElement","className","openCheckout","checkoutModal","createCheckoutModal","renderCheckoutForm","closeCheckout","form","handleOrderSubmit","checkoutItems","deliveryOptions","method","paymentOptions","updateCheckoutTotal","selectedDelivery","deliveryPrice","m","value","itemsTotal","finalTotal","formData","FormData","get","phone","email","showOrderConfirmation","error","console","deliveryMethod","paymentMethod","confirmationModal","toLocaleDateString","getOrderStatusText","cssText","head","closeBtn","remove","statusMap","message","notification","createAdminButton","window","location","hostname","adminBtn","openAdminPanel","adminModal","renderOrdersList","toLocaleString","btn","alert","reset"],"version":3,"file":"bose-test.c80d5277.js.map"}